{"ast":null,"code":"var _jsxFileName = \"/home/barsu/Development/code/phase4/phase4_Project/Rails-Project/client/src/components/ResetPassword.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ResetPassword() {\n  _s();\n\n  const navigate = useNavigate();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    if (password !== confirmPassword) {\n      setError(\"Passwords don't match\");\n      return;\n    }\n\n    fetch('/reset_password', {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    }).then(res => {\n      if (res.ok) {\n        console.log(res);\n        return res.json();\n      } else {\n        throw new Error('Something went wrong');\n      }\n    }).then(user => {\n      // Do something with the updated user, such as redirecting to the login page\n      navigate('/login');\n    }).catch(error => {\n      setError(error.message);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control\",\n          type: \"email\",\n          id: \"email\",\n          name: \"email\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"New Password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control\",\n          type: \"password\",\n          id: \"password\",\n          name: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"confirm-password\",\n          children: \"Confirm New Password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-control\",\n          type: \"password\",\n          id: \"confirm-password\",\n          name: \"confirm-password\",\n          value: confirmPassword,\n          onChange: e => setConfirmPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        type: \"submit\",\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ResetPassword, \"pEG1E135XuOi95FCJNEJ2HrrPbY=\", false, function () {\n  return [useNavigate];\n});\n\n_c = ResetPassword;\nexport default ResetPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"sources":["/home/barsu/Development/code/phase4/phase4_Project/Rails-Project/client/src/components/ResetPassword.js"],"names":["React","useState","useNavigate","ResetPassword","navigate","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","error","setError","handleSubmit","e","preventDefault","fetch","method","headers","body","JSON","stringify","then","res","ok","console","log","json","Error","user","catch","message","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nfunction ResetPassword() {\n  const navigate = useNavigate();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [error, setError] = useState('');\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (password !== confirmPassword) {\n      setError(\"Passwords don't match\");\n      return;\n    }\n\n    fetch('/reset_password', {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email,\n          password: password\n        })\n      })\n      .then((res) => {\n        if (res.ok) {\n            console.log(res)\n          return res.json();\n        } else {\n          throw new Error('Something went wrong');\n        }\n      })\n      .then((user) => {\n        // Do something with the updated user, such as redirecting to the login page\n        navigate('/login');\n      })\n      .catch((error) => {\n        setError(error.message);\n      });\n      \n  }\n\n  return (\n    <div>\n      <h1>Reset Password</h1>\n      <form onSubmit={handleSubmit}>\n      <div className=\"form-group\">\n          <label htmlFor=\"email\">Email:</label>\n          <input className=\"form-control\" type=\"email\" id=\"email\" name=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\">New Password:</label>\n          <input className=\"form-control\" type=\"password\" id=\"password\" name=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} required />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"confirm-password\">Confirm New Password:</label>\n          <input className=\"form-control\" type=\"password\" id=\"confirm-password\" name=\"confirm-password\" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} required />\n        </div>\n        <button  className=\"btn btn-primary\" type=\"submit\">Reset Password</button>\n        {error && <p>{error}</p>}\n      </form>\n    </div>\n  );\n}\n\nexport default ResetPassword;\n"]},"metadata":{},"sourceType":"module"}